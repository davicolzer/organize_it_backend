generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  https://github.com/pantharshit00/prisma-docs-generator
generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

//  https://github.com/keonik/prisma-erd-generator
generator erd {
  provider = "prisma-erd-generator"
}

//  https://github.com/notiz-dev/prisma-dbml-generator
generator dbml {
  provider = "prisma-dbml-generator"
}


model Company {
  id                  String @id @default(uuid())
  name                String
  user                User[]
  creatorId           String

  identificationId    CompanyIdentification?
  notificationConfig  NotificationConfig?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model CompanyIdentification {
  id                  String @id @default(uuid())
  cnpj                String?
  cpf                 String?

  company             Company @relation(fields: [companyId], references: [id])
  companyId           String
}

model User {
  id                  String @id @default(uuid())
  email               String
  firstName           String
  lastName            String
  password            String

  purchases           Purchase[]
  company             Company? @relation(fields: [companyId], references: [id])
  companyId           String?
  role                Role @relation(fields: [roleId], references: [id])
  roleId              String

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Role {
  id                  String @id @default(uuid())
  name                String
  description         String?

  users               User[]

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}



model NotificationConfig {
  company             Company @relation(fields: [companyId], references: [id])
  companyId           String
  send_email_product_arrival Boolean @default(false)

  @@id([companyId])
}

model Purchase {
  id                  String @id @default(uuid())
  deadline            DateTime?

  user                User @relation(fields: [userId], references: [id])
  userId              String
  requester           Requester? @relation(fields: [requesterId], references: [id])
  requesterId         String?

  purchaseStatus      PurchaseStatus @relation(fields: [statusId], references: [id]) 
  statusId            String
  products            PurchaseOnProducts[]
}

model PurchaseOnProducts {
  purchase            Purchase @relation(fields: [purchaseId], references: [id])
  product             Product @relation(fields: [productId], references: [id])

  productId           String
  purchaseId          String

  @@id([productId, purchaseId])
}

model Product {
  id                  String @id @default(uuid())
  name                String
  price               Float
  description         String?

  brand               ProductBrand? @relation(fields: [brandId], references: [id])
  brandId             String?
  model               ProductModel? @relation(fields: [modelId], references: [id])
  modelId             String?
  purchase            PurchaseOnProducts[]
  provider            ProductOnProvider[]

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model PurchaseStatus {
  id                  String @id @default(uuid())
  description         String
  datePurchase        DateTime
  dateArrival         DateTime?
  dateDispatch        DateTime?

  purchase            Purchase[]
}

model ProductBrand {
  id                  String @id @default(uuid())
  name                String
  product             Product[]

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model ProductModel {
  id                  String @id @default(uuid())
  name                String
  product             Product[]

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model ProductOnProvider {
  product             Product @relation(fields: [productId], references: [id])
  provider            Provider @relation(fields: [providerId], references: [id])

  productId           String
  providerId          String

  @@id([providerId, productId])
}

model Provider {
  id                  String @id @default(uuid())
  name                String
  phone               String?
  email               String?

  products ProductOnProvider[]

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Requester {
  id                  String @id @default(uuid())
  name                String
  email               String
  purchase            Purchase[]

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Log {
  id                  String @id @default(uuid())
  activity            String
  createdBy           String
  creatorId           String
  createdAt           DateTime  @default(now())
}